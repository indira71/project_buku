📚 Project Buku API

API ini dibuat untuk mengelola data buku, eksemplar, dan peminjaman pada sistem perpustakaan.
Dibangun menggunakan Node.js, Express.js, dan MySQL.

🚀 Fitur Utama

Manajemen Buku → CRUD, search, pagination

Manajemen Eksemplar → CRUD, cek status eksemplar

Manajemen Peminjaman → CRUD transaksi peminjaman

Statistik → jumlah eksemplar per status

🛠️ Teknologi

Node.js + Express.js

MySQL + mysql2

UUID untuk ID unik

Joi (opsional) untuk validasi schema

📂 Struktur Folder
project_buku/
├── src/
│   ├── config/          # Konfigurasi database
│   ├── controllers/     # Logic untuk request/response
│   ├── models/          # Query database
│   ├── routes/          # Endpoint routing
│   ├── schemas/         # Validasi schema (Joi/Yup)
│
├── package.json
└── README.md

⚙️ Instalasi

Clone repo:

git clone https://github.com/username/project_buku.git
cd project_buku


Install dependencies:

npm install


Konfigurasi .env:

DB_HOST=localhost
DB_USER=root
DB_PASSWORD=yourpassword
DB_NAME=perpustakaan


Jalankan server:

npm start

📌 Endpoint Utama
📖 Buku

GET /books

GET /books/:id

POST /books

PUT /books/:id

DELETE /books/:id

📑 Eksemplar

GET /exemplars

GET /exemplars/:id

POST /exemplars

PUT /exemplars/:id

DELETE /exemplars/:id

📕 Peminjaman

GET /lendings

POST /lendings

PUT /lendings/:id

DELETE /lendings/:id

📑 Schema API
Buku
{
  "judul": "string (required)",
  "edisi": "string (optional)",
  "penerbit": "string (optional)",
  "deskripsi_fisik": "string (optional)",
  "sinopsis": "string (optional)",
  "lokasi_ruangan": "string (optional)",
  "tanggal_pengadaan": "YYYY-MM-DD (optional)",
  "bentuk_fisik": "string (optional)",
  "jenis_sumber": "string (optional)",
  "akses_pinjam": "string (optional)",
  "kategori_id": "uuid (required)",
  "status_id": "uuid (required)"
}

Eksemplar
{
  "nomor_induk": "string (required)",
  "buku_id": "uuid (required)",
  "status": "ST01 | ST02 | ST03 | ST04 (default: ST01)",
  "opac": "string (default: 1)"
}

Peminjaman
{
  "buku_id": "uuid (required)",
  "pengguna_id": "uuid (required)",
  "tanggal_pinjam": "YYYY-MM-DD (required)",
  "tanggal_kembali": "YYYY-MM-DD (optional)",
  "status_id": "ST01 | ST02 | ST03 | ST04 (required)"
}

🧑‍💻 Contoh Validasi Schema (Joi)

Eksemplar (exemplarSchema.js):

import Joi from "joi";

export const exemplarSchema = Joi.object({
  nomor_induk: Joi.string().required(),
  buku_id: Joi.string().guid().required(),
  status: Joi.string().valid("ST01", "ST02", "ST03", "ST04").default("ST01"),
  opac: Joi.string().default("1")
});


Penggunaan di controller:

const { error, value } = exemplarSchema.validate(req.body);
if (error) {
  return res.status(400).json({ message: error.details[0].message });
}

🧑‍🤝‍🧑 Kontributor

